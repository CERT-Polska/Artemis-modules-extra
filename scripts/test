#!/bin/bash

docker compose -f docker-compose.test.yaml down --remove-orphans

# Let's first start everything except the test container and perform relevant setup
docker compose -f docker-compose.test.yaml up -d --build --scale test-sqlmap=0

# Wait for the dependency services to be available
docker compose -f docker-compose.test.yaml run test-sqlmap /wait-for-it.sh test-service-with-sql-injection-mysql:80
docker compose -f docker-compose.test.yaml run test-sqlmap /wait-for-it.sh test-service-with-sql-injection-postgres:80
docker compose -f docker-compose.test.yaml run test-sqlmap /wait-for-it.sh test-service-with-sql-injection-mysql-db:3306
docker compose -f docker-compose.test.yaml run test-sqlmap /wait-for-it.sh test-service-with-sql-injection-postgres-db:5432
docker compose -f docker-compose.test.yaml run test-xss_scanner /wait-for-it.sh test-apache-with-xss:80

# Now we are ready to start the tests
docker compose -f docker-compose.test.yaml run test-xss_scanner

if [ $? -ne 0 ]; then
    exit 1
fi

docker compose -f docker-compose.test.yaml run test-ssl_checks

if [ $? -ne 0 ]; then
    exit 1
fi

docker compose -f docker-compose.test.yaml run test-sqlmap

exit $?
